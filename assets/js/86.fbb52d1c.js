(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{479:function(t,a,e){"use strict";e.r(a);var s=e(5),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"initial-setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#initial-setup"}},[t._v("#")]),t._v(" Initial setup")]),t._v(" "),e("p",[t._v("This tutorial uses a Terra-specific development suite called Terrain.")]),t._v(" "),e("p",[t._v("Terrain will help you:")]),t._v(" "),e("ul",[e("li",[t._v("Scaffold your dApp project")]),t._v(" "),e("li",[t._v("Ease the development and deployment process")]),t._v(" "),e("li",[t._v("Create custom tasks for blockchain and contract interaction with less boilerplate code")]),t._v(" "),e("li",[t._v("Access a console (or REPL) for interacting with the Terra blockchain")]),t._v(" "),e("li",[t._v("Create predefined functions used in tasks and in the console")])]),t._v(" "),e("h2",{attrs:{id:"prerequisites"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[t._v("#")]),t._v(" Prerequisites")]),t._v(" "),e("h2",{attrs:{id:"_1-download-localterra"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-download-localterra"}},[t._v("#")]),t._v(" 1. Download LocalTerra")]),t._v(" "),e("p",[t._v("LocalTerra is a development environment designed to make it easy for smart contract developers to test their contracts locally.")]),t._v(" "),e("p",[t._v("To download LocalTerra, run the following command:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --branch v0.5.2 --depth "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" https://github.com/terra-money/localterra\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" localterra\ndocker-compose up\n")])])]),e("h2",{attrs:{id:"_2-set-up-rust"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-set-up-rust"}},[t._v("#")]),t._v(" 2. Set up Rust")]),t._v(" "),e("p",[t._v("Rust is the main programming language used for CosmWasm smart contracts. While WASM smart contracts can theoretically be written in any programming language, CosmWasm libraries and tooling work best with Rust.")]),t._v(" "),e("p",[t._v("Install the latest version of "),e("a",{attrs:{href:"https://www.rust-lang.org/tools/install",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. Set 'stable' as the default release channel:")]),t._v("\n\nrustup default stable\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. Add WASM as the compilation target:")]),t._v("\n\nrustup target "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" wasm32-unknown-unknown\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. Install the following packages to generate the contract:")]),t._v("\n\ncargo "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" cargo-generate --features vendored-openssl\ncargo "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" cargo-run-script\n")])])]),e("h2",{attrs:{id:"_3-install-terrain"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-install-terrain"}},[t._v("#")]),t._v(" 3.  Install Terrain")]),t._v(" "),e("p",[t._v("Use npm to install the terrain command-line tool globally:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g @iboss/terrain\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);